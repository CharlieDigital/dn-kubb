/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { GetCrmRecordsQueryResponse } from "../types/GetCrmRecords.ts";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
import { getCrmRecords } from "../clients/getCrmRecords.ts";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const getCrmRecordsSuspenseQueryKey = () => [{ url: '/CrmRecords' }] as const

export type GetCrmRecordsSuspenseQueryKey = ReturnType<typeof getCrmRecordsSuspenseQueryKey>

export function getCrmRecordsSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getCrmRecordsSuspenseQueryKey()
  return queryOptions<GetCrmRecordsQueryResponse, ResponseErrorConfig<Error>, GetCrmRecordsQueryResponse, typeof queryKey>({
 
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return getCrmRecords(config)
   },
  })
}

/**
 * {@link /CrmRecords}
 */
export function useGetCrmRecordsSuspense<TData = GetCrmRecordsQueryResponse, TQueryKey extends QueryKey = GetCrmRecordsSuspenseQueryKey>(options: 
{
  query?: Partial<UseSuspenseQueryOptions<GetCrmRecordsQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getCrmRecordsSuspenseQueryKey()

  const query = useSuspenseQuery({
   ...getCrmRecordsSuspenseQueryOptions(config),
   queryKey,
   ...queryOptions
  } as unknown as UseSuspenseQueryOptions, queryClient) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}